{"version":3,"sources":["config.js","hash.js","components/Rate.js","components/modalStyles.js","components/Recommended.js","components/PersonalTaste.js","components/TitleText.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["scopes","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","Rate","state","rating","changeRating","bind","newRating","this","setState","widgetRatedColors","widgetHoverColors","widgetDimensions","Widget","Component","customStyles","content","top","left","right","bottom","marginRight","transform","spotifyApi","SpotifyWebApi","library","add","farFaStar","PersonalTaste","props","handleOpenModal","trackName","showModal","modalTrack","handleCloseModal","setAccessToken","token","albumUri","trackUri","console","log","play","context_uri","offset","uri","err","data","className","artist","name","slice","toLowerCase","recommendedTracks","map","track","i","scope","style","width","src","album_art","title","onClick","album_id","track_id","icon","size","isOpen","useState","albumPopoverOpen","toggleAlbumPopover","singlePopoverOpen","toggleSinglePopover","images","url","albumTypes","albums","body","length","album","place","onOuterAction","singles","single","Object","keys","artistOverallSound","audioFeature","overallSound","toFixed","user","twoTracks","artists","Recommended","artistAlbums","noOfRecommendedAlbums","ClickedTitleText","SearchTitleText","Search","clickArtistProfile","chosenArtist","fetch","range","weight","then","response","json","chosenArtistOverallSound","randomUserTracks","artistAlbumTypes","acousticness","danceability","energy","instrumentalness","loudness","speechiness","tempo","valence","topTracks","onSearchChange","onRangeChange","onWeightChange","getMe","e","target","value","searchArtists","max","items","followers","total","reset","type","placeholder","onChange","class","role","key","id","App","duration_ms","is_playing","progress_ms","getCurrentlyPlaying","_token","access_token","$","beforeSend","xhr","setRequestHeader","success","color","href","join","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uUAKaA,EAAS,CACpB,gBACA,8BACA,2BACA,8BCTIC,EAAOC,OAAOC,SAASF,KAC1BG,UAAU,GACVC,MAAM,KACNC,QAAO,SAASC,EAASC,GACxB,GAAIA,EAAM,CACR,IAAIC,EAAQD,EAAKH,MAAM,KACvBE,EAAQE,EAAM,IAAMC,mBAAmBD,EAAM,IAE/C,OAAOF,IACN,IACLL,OAAOC,SAASF,KAAO,GAERA,Q,+DC8BAU,E,YAtCb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,OAAQ,GAEV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALR,E,0EAQDC,GACXC,KAAKC,SAAS,CACZL,OAAQG,M,+BAKV,OACE,kBAAC,IAAD,CACEH,OAAQI,KAAKL,MAAMC,OACnBM,kBAAkB,UAClBC,kBAAkB,UAClBC,iBAAiB,OACjBP,aAAcG,KAAKH,cAEnB,kBAAC,IAAQQ,OAAT,MACA,kBAAC,IAAQA,OAAT,MACA,kBAAC,IAAQA,OAAT,MACA,kBAAC,IAAQA,OAAT,MACA,kBAAC,IAAQA,OAAT,MACA,kBAAC,IAAQA,OAAT,MACA,kBAAC,IAAQA,OAAT,MACA,kBAAC,IAAQA,OAAT,MACA,kBAAC,IAAQA,OAAT,MACA,kBAAC,IAAQA,OAAT,W,GAjCWC,a,iBCHNC,EAAe,CAC1BC,QAAS,CACPC,IAAK,MACLC,KAAM,MACNC,MAAO,OACPC,OAAQ,OACRC,YAAa,OACbC,UAAW,0BCEXC,EAAa,IAAIC,EACrBC,IAAQC,IAAIC,K,IAwJGC,E,YArJb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAuBRC,gBAAkB,SAAAC,GAChB,EAAKtB,SAAS,CAAEuB,WAAW,EAAMC,WAAYF,KAvB7C,EAAK5B,MAAQ,CACX6B,WAAW,EACXC,WAAY,IAGd,EAAKH,gBAAkB,EAAKA,gBAAgBxB,KAArB,gBACvB,EAAK4B,iBAAmB,EAAKA,iBAAiB5B,KAAtB,gBARP,E,iFAWjBiB,EAAWY,eAAe3B,KAAKqB,MAAMO,S,2BAGlCC,EAAUC,GACbC,QAAQC,IAAIH,EAAUC,GACtBf,EAAWkB,KACT,CAAEC,YAAaL,EAAUM,OAAQ,CAAEC,IAAKN,KACxC,SAASO,EAAKC,GACZP,QAAQC,IAAIM,Q,yCAUhBtC,KAAKC,SAAS,CAAEuB,WAAW,M,+BAGnB,IAAD,OACP,OACE,yBAAKe,UAAU,aACb,yBAAKA,UAAU,YACb,wBAAIA,UAAU,2BAAd,gBACe,0BAAMA,UAAU,gBAAhB,gBADf,qCAEiCvC,KAAKqB,MAAMmB,OAAOC,KACE,KAAlDzC,KAAKqB,MAAMmB,OAAOC,KAAKC,OAAO,GAAGC,cAC9B,IACA,KAAM,IALZ,UAQA,2BAAOJ,UAAU,eACf,+BACGvC,KAAKqB,MAAMuB,kBACV5C,KAAKqB,MAAMuB,kBAAkBC,KAAI,SAACC,EAAOC,GAAR,OAC/B,4BACE,wBACEC,MAAM,MACNC,MAAO,CAAEC,MAAO,MAChBX,UAAU,qBAEV,wBAAIA,UAAU,QAAQQ,EAAI,IAE5B,wBAAIE,MAAO,CAAEC,MAAO,OAASX,UAAU,qBACrC,yBACEY,IAAKL,EAAMM,UACXH,MAAO,CAAEC,MAAO,WAGpB,wBAAID,MAAO,CAAEC,MAAO,OAASX,UAAU,aACrC,wBAAIA,UAAU,QACZ,gCAASO,EAAMO,SAGnB,wBAAIJ,MAAO,CAAEC,MAAO,MAAQX,UAAU,cACpC,uBACEA,UAAU,aACVe,QAAS,kBACP,EAAKrB,KACH,iBAAmBa,EAAMS,SACzB,iBAAmBT,EAAMU,YAI7B,uBAAGjB,UAAU,8BAGjB,wBAAIU,MAAO,CAAEC,MAAO,MAAQX,UAAU,cACpC,uBACEA,UAAU,aACVe,QAAS,kBAAM,EAAKhC,gBAAgBwB,EAAMO,SAE1C,kBAAC,IAAD,CACEI,KAAMtC,IACNuC,KAAK,KACLnB,UAAU,eAOpB,+BAGJ,kBAAC,IAAD,CAAYoB,OAAQ3D,KAAKL,MAAM6B,UAAWyB,MAAO1C,GAC/C,yBAAKgC,UAAU,eACb,mCACO,IACL,0BAAMA,UAAU,gBAAhB,IACIvC,KAAKL,MAAM8B,WADf,MAIF,qFACA,+FAKF,yBAAKc,UAAU,YACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,QAGJ,yBAAKA,UAAU,YACb,yBAAKA,UAAU,mBACb,4BACEA,UAAU,mBACVe,QAAStD,KAAK0B,kBAFhB,aAWV,yBAAKa,UAAU,kBACb,yBAAKA,UAAU,UACf,wBAAIA,UAAU,UAAd,gBACe,0BAAMA,UAAU,gBAAhB,gBADf,qCAEiCvC,KAAKqB,MAAMmB,OAAOC,KACE,KAAlDzC,KAAKqB,MAAMmB,OAAOC,KAAKC,OAAO,GAAGC,cAC9B,IACA,KAAM,IALZ,WASF,yBAAKJ,UAAU,8BACb,wBAAIA,UAAU,yBAAd,sB,GA/IkBjC,a,uBC8Lbc,MArMf,SAAuBC,GAAQ,IAAD,EACiBuC,oBAAS,GAD1B,mBACvBC,EADuB,KACLC,EADK,OAEmBF,oBAAS,GAF5B,mBAEvBG,EAFuB,KAEJC,EAFI,KAI5B,OACE,yBAAKzB,UAAU,uBACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,gCACZ,6BACE,yBACEY,IAAK9B,EAAMmB,OAAOyB,OAAO,GAAGC,IAC5B3B,UAAU,qCACVU,MAAO,CAAEC,MAAO,UAGnB7B,EAAM8C,WAAWC,OAChB,qCACQ,IACN,kBAAC,IAAD,CACET,OAAQE,EACRtB,UAAU,gCACV8B,KACE,yBAAK9B,UAAU,aACZlB,EAAM8C,WAAWC,OAAOE,OAAS,EAChCjD,EAAM8C,WAAWC,OAAOvB,KAAI,SAAA0B,GAAK,OAC/B,yBAAKhC,UAAU,aACb,yBACEY,IAAKoB,EAAMnB,UACXH,MAAO,CAAEC,MAAO,QAElB,0BAAMX,UAAU,WAAWgC,EAAMlB,WAIrC,yBAAKd,UAAU,OACZlB,EAAM8C,WAAWC,OAAOvB,KAAI,SAAA0B,GAAK,OAChC,yBAAKhC,UAAU,mBACb,yBACEY,IAAKoB,EAAMnB,UACXH,MAAO,CAAEC,MAAO,SAElB,0BAAMX,UAAU,WAAWgC,EAAMlB,aAO7CmB,MAAM,QACNC,cAAeX,GAEf,yBACEvB,UAAU,uBACVe,QAAS,kBAAMQ,GAAoBD,KAEnC,0BAAMtB,UAAU,mBACblB,EAAM8C,WAAWC,OAAOE,OAAQ,IACE,GAAlCjD,EAAM8C,WAAWC,OAAOE,OAAc,QAAU,YAG5C,IA5Cb,MA6CM,IACJ,kBAAC,IAAD,CACEX,OAAQI,EACRxB,UAAU,gCACV8B,KACE,yBAAK9B,UAAU,aACZlB,EAAM8C,WAAWO,QAAQJ,OAAS,EACjCjD,EAAM8C,WAAWO,QAAQ7B,KAAI,SAAA8B,GAAM,OACjC,yBAAKpC,UAAU,aACb,yBACEY,IAAKwB,EAAOvB,UACZH,MAAO,CAAEC,MAAO,QAElB,0BAAMX,UAAU,WAAWoC,EAAOtB,WAItC,yBAAKd,UAAU,QACZlB,EAAM8C,WAAWO,QAAQ7B,KAAI,SAAA8B,GAAM,OAClC,yBAAKpC,UAAU,mBACb,yBACEY,IAAKwB,EAAOvB,UACZH,MAAO,CAAEC,MAAO,SAElB,0BAAMX,UAAU,WAAWoC,EAAOtB,aAO9CmB,MAAM,QACNC,cAAeT,GAEf,yBACEzB,UAAU,uBACVe,QAAS,kBAAMU,GAAqBD,KAEpC,0BAAMxB,UAAU,mBACblB,EAAM8C,WAAWO,QAAQJ,OAAQ,IACE,GAAnCjD,EAAM8C,WAAWO,QAAQJ,OACtB,SACA,aAGC,IA1Fb,8CA2F8CjD,EAAMmB,OAAOC,KACX,KAA7CpB,EAAMmB,OAAOC,KAAKC,OAAO,GAAGC,cACzB,IACA,KAAM,IA9FZ,kBAkGA,cAGJ,2BAAOJ,UAAU,gCACf,+BACE,4BACE,wBAAIS,MAAM,OAAV,WACA,wBAAIA,MAAM,OAAV,WAGJ,+BACG4B,OAAOC,KAAKxD,EAAMyD,oBAAoBjC,KAAI,SAAAkC,GAAY,OACrD,4BACE,wBAAIxC,UAAU,aAAawC,GAC3B,4BACG1D,EAAM2D,aAAaD,GAChB1D,EAAMyD,mBAAmBC,GAAcE,QAAQ,GAC/C,qBAOhB,yBAAK1C,UAAU,OACb,2BAAOA,UAAU,gCACf,+BACE,4BACE,wBAAIS,MAAM,OAAV,WACA,wBAAIA,MAAM,OAAV,WAGJ,+BACG4B,OAAOC,KAAKxD,EAAM2D,cAAcnC,KAAI,SAAAkC,GAAY,OAC/C,4BACE,wBAAIxC,UAAU,aAAawC,GAC3B,4BACG1D,EAAM2D,aAAaD,GAChB1D,EAAM2D,aAAaD,GAAcE,QAAQ,GACzC,oBAMd,wBAAI1C,UAAU,2BACZ,6BACE,yBACEY,IAAK9B,EAAM6D,KAAKjB,OAAO,GAAGC,IAC1B3B,UAAU,6CAJhB,kGAQ2B,IACxBlB,EAAM8D,UACL,6BACE,0BAAM5C,UAAU,gBAAgBlB,EAAM8D,UAAU,GAAG1C,MADrD,MACqE,IACnE,0BAAMF,UAAU,kBACblB,EAAM8D,UAAU,GAAGC,QAAQ,GAAG3C,MACzB,IAJV,MAKM,IACJ,0BAAMF,UAAU,gBAAgBlB,EAAM8D,UAAU,GAAG1C,MANrD,MAMqE,IACnE,0BAAMF,UAAU,kBACblB,EAAM8D,UAAU,GAAGC,QAAQ,GAAG3C,MARnC,KAaA,gCAIN,kBAAC4C,EAAD,CACE7C,OAAQnB,EAAMmB,OACdI,kBAAmBvB,EAAMuB,kBACzBhB,MAAOP,EAAMO,MACb0D,aAAcjE,EAAMiE,aACpBC,sBAAuB,MClMxB,SAASC,EAAiBnE,GAC/B,OACE,wBAAIkB,UAAU,aAAd,qBACqB,IACnB,0BAAMA,UAAU,gBACblB,EAAMmB,OAAOC,KACiC,MAA9CpB,EAAMmB,OAAOC,KAAKC,OAAO,GAAGC,cAAwB,IAAM,MACrD,IALV,YAWG,SAAS8C,IACd,OACE,wBAAIlD,UAAU,aAAd,qBACqB,IACnB,0BAAMA,UAAU,eAAhB,0BAFF,aCTJ,IAAIxB,EAAa,IAAIC,EA6WN0E,E,YA1Wb,WAAYrE,GAAQ,IAAD,8BACjB,4CAAMA,KAgIRsE,mBAAqB,SAAAnD,GACnB,EAAKvC,SAAS,CACZ2F,aAAcpD,IAEhBqD,MACE,6DACErD,EAAOJ,IACP,UACA,EAAKf,MAAMO,MACX,UACA,EAAKjC,MAAMmG,MACX,WACA,EAAKnG,MAAMoG,QACbC,MAAK,SAAAC,GAAQ,OACbA,EAASC,OAAOF,MAAK,SAAA1D,GACnBP,QAAQC,IAAIM,GACZ,EAAKrC,SAAS,CACZkG,yBAA0B7D,EAAI,sBAC9B0C,aAAc1C,EAAI,oBAClB8D,iBAAkB9D,EAAI,eACtB+D,iBAAkB/D,EAAI,mBACtBM,kBAAmBN,EAAI,4BApJ7B,EAAK3C,MAAQ,CACXuF,KAAM,GACN1D,WAAW,EACX4D,QAAS,GACTQ,aAAc,GACdO,yBAA0B,CACxBG,aAAc,EACdC,aAAc,EACdC,OAAQ,EACRC,iBAAkB,EAClBC,SAAU,EACVC,YAAa,EACbC,MAAO,EACPC,QAAS,GAEXC,UAAW,GACX9B,aAAc,CACZ6B,QAAS,EACTN,aAAc,EACdC,OAAQ,EACRC,iBAAkB,EAClBE,YAAa,EACbL,aAAc,EACdI,SAAU,EACVE,MAAO,GAETP,iBAAkB,GAClBzD,kBAAmB,GACnBkD,MAAO,cACPC,OAAQ,IAEV,EAAKgB,eAAiB,EAAKA,eAAejH,KAApB,gBACtB,EAAK6F,mBAAqB,EAAKA,mBAAmB7F,KAAxB,gBAC1B,EAAKwB,gBAAkB,EAAKA,gBAAgBxB,KAArB,gBACvB,EAAK4B,iBAAmB,EAAKA,iBAAiB5B,KAAtB,gBACxB,EAAKkH,cAAgB,EAAKA,cAAclH,KAAnB,gBACrB,EAAKmH,eAAiB,EAAKA,eAAenH,KAApB,gBAtCL,E,iFA0CjBiB,EAAWY,eAAe3B,KAAKqB,MAAMO,OACrCb,EAAWmG,MACT,SAAS7E,EAAKC,GACZtC,KAAKC,SAAS,CACZiF,KAAM5C,KAERxC,KAAKE,S,oCAIGmH,GACZnH,KAAKC,SAAS,CACZ6F,MAAOqB,EAAEC,OAAOC,U,qCAILF,GACbnH,KAAKC,SAAS,CACZ8F,OAAQoB,EAAEC,OAAOC,U,wCAKnBrH,KAAKC,SAAS,CAAEuB,WAAW,M,yCAI3BxB,KAAKC,SAAS,CAAEuB,WAAW,M,8BAI3BxB,KAAKC,SAAS,CACZmF,QAAS,GACTQ,aAAc,GACdO,yBAA0B,CACxBG,aAAc,EACdC,aAAc,EACdC,OAAQ,EACRC,iBAAkB,EAClBC,SAAU,EACVC,YAAa,EACbC,MAAO,EACPC,QAAS,GAEXC,UAAW,GACX9B,aAAc,CACZ6B,QAAS,EACTN,aAAc,EACdC,OAAQ,EACRC,iBAAkB,EAClBE,YAAa,EACbL,aAAc,EACdI,SAAU,EACVE,MAAO,GAETP,iBAAkB,GAClBzD,kBAAmB,O,qCAIRuE,GACTA,EAAEC,OAAOC,MACXtG,EAAWuG,cACTH,EAAEC,OAAOC,MACT,SAAShF,EAAKC,GACZ,IAAIiF,EAAM,GACNjF,EAAK8C,UACPmC,EAAMjF,EAAK8C,QAAQoC,MAAMlD,QAE3B,IAAK,IAAIvB,EAAI,EAAGA,EAAIT,EAAK8C,QAAQoC,MAAMlD,OAAQvB,IAC7C,GAAIT,EAAK8C,QAAQoC,MAAMzE,GAAG0E,UAAUC,MAAQ,IAAM,CAChDH,EAAMxE,EACN,MAGJ/C,KAAKC,SAAS,CACZmF,QAAS9C,EAAK8C,QAAQoC,MAAM9E,MAAM,EAAG6E,MAEvCzH,KAAKE,OAGTA,KAAKC,SAAS,CACZmF,QAAS,O,+BAgCL,IAAD,OACP,OACE,yBAAK7C,UAAU,uBACZvC,KAAKL,MAAMiG,aAAanD,KACvB,6BACE,kBAAC+C,EAAD,CACEhD,OAAQxC,KAAKL,MAAMiG,eAErB,kBAAC,EAAD,CACEV,KAAMlF,KAAKL,MAAMuF,KACjBF,aAAchF,KAAKL,MAAMqF,aACzBxC,OAAQxC,KAAKL,MAAMiG,aACnBd,mBAAoB9E,KAAKL,MAAMwG,yBAC/BhB,UAAWnF,KAAKL,MAAMyG,iBACtBjC,WAAYnE,KAAKL,MAAM0G,iBACvBzE,MAAO5B,KAAKqB,MAAMO,MAClBgB,kBAAmB5C,KAAKL,MAAMiD,oBAEhC,4BAAQL,UAAU,kBAAkBe,QAAS,kBAAM,EAAKqE,UAAxD,2BAKF,6BACE,kBAAClC,EAAD,MACA,yBAAKlD,UAAU,iBACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YACb,2BACEqF,KAAK,OACLrF,UAAU,+BACVsF,YAAY,gBACZC,SAAU9H,KAAK+G,kBAGnB,yBAAKxE,UAAU,sBACb,4BACEA,UAAU,gBACVe,QAAS,kBAAM,EAAKhC,oBAEpB,uBAAGyG,MAAM,qBAEX,kBAAC,IAAD,CAAYpE,OAAQ3D,KAAKL,MAAM6B,UAAWyB,MAAO1C,GAC/C,wBAAIgC,UAAU,eAAd,oEAIA,wBAAIA,UAAU,eAAd,oFAIA,yBACEA,UAAU,qCACVyF,KAAK,SAEL,4BACEJ,KAAK,SACLP,MAAM,aACN9E,UACE,QACqB,cAApBvC,KAAKL,MAAMmG,MACR,WACA,oBAENxC,QAAStD,KAAKgH,eAThB,gBAaA,4BACEY,KAAK,SACLP,MAAM,cACN9E,UACE,QACqB,eAApBvC,KAAKL,MAAMmG,MACR,WACA,oBAENxC,QAAStD,KAAKgH,eAThB,iBAaA,4BACEY,KAAK,SACLP,MAAM,YACN9E,UACE,QACqB,aAApBvC,KAAKL,MAAMmG,MACR,WACA,oBAENxC,QAAStD,KAAKgH,eAThB,cAcF,wBAAIzE,UAAU,eAAd,kHAIA,wBAAIA,UAAU,eAAd,wEAIA,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,cAAhB,2BACA,yBAAKA,UAAU,YAAYyF,KAAK,SAC9B,4BACEJ,KAAK,SACLP,MAAO,GACP9E,UACE,QACsB,IAArBvC,KAAKL,MAAMoG,OACR,WACA,oBAENzC,QAAStD,KAAKiH,gBAThB,OAaA,4BACEW,KAAK,SACLP,MAAO,GACP9E,UACE,QACsB,IAArBvC,KAAKL,MAAMoG,OACR,WACA,oBAENzC,QAAStD,KAAKiH,gBAThB,OAaA,4BACEW,KAAK,SACLP,MAAO,GACP9E,UACE,QACsB,IAArBvC,KAAKL,MAAMoG,OACR,WACA,oBAENzC,QAAStD,KAAKiH,gBAThB,OAaA,4BACEW,KAAK,SACLP,MAAO,GACP9E,UACE,QACsB,IAArBvC,KAAKL,MAAMoG,OACR,WACA,oBAENzC,QAAStD,KAAKiH,gBAThB,OAaA,4BACEW,KAAK,SACLP,MAAO,GACP9E,UACE,QACsB,IAArBvC,KAAKL,MAAMoG,OACR,WACA,oBAENzC,QAAStD,KAAKiH,gBAThB,QAcF,0BAAM1E,UAAU,cAAhB,wBAEF,yBAAKA,UAAU,oBACb,4BACEA,UAAU,mBACVe,QAAStD,KAAK0B,kBAFhB,aAUP1B,KAAKL,MAAMyF,QACVpF,KAAKL,MAAMyF,QAAQvC,KAAI,SAAAL,GAAM,OAC3B,4BACEoF,KAAK,SACLrF,UAAU,iCACV0F,IAAKzF,EAAO0F,GACZ5E,QAAS,kBAAM,EAAKqC,mBAAmBnD,KAEtCA,EAAOC,SAIZ,oC,GAlWOnC,aCoNN6H,G,kBArNb,aAAe,IAAD,8BACZ,+CACKxI,MAAQ,CACXiC,MAAO,KACPrC,KAAM,CACJgF,MAAO,CACLN,OAAQ,CAAC,CAAEC,IAAK,MAElBzB,KAAM,GACN2C,QAAS,CAAC,CAAE3C,KAAM,KAClB2F,YAAa,GAEfC,WAAY,SACZC,YAAa,GAEf,EAAKC,oBAAsB,EAAKA,oBAAoBzI,KAAzB,gBAff,E,iFAmBZ,IAAI0I,EAASxJ,EAAKyJ,aAEdD,GAEFxI,KAAKC,SAAS,CACZ2B,MAAO4G,M,wFAUO5G,GAAQ,IAAD,OAEzB8G,OAAO,CACLxE,IAAK,uCACL0D,KAAM,MACNe,WAAY,SAAAC,GACVA,EAAIC,iBAAiB,gBAAiB,UAAYjH,IAEpDkH,QAAS,SAAAxG,GACP,EAAKrC,SAAS,CACZV,KAAM+C,EAAK/C,KACX8I,WAAY/F,EAAK+F,WACjBC,YAAahG,EAAKgG,mB,+BAOxB,OACE,yBAAK/F,UAAU,QACXvC,KAAKL,MAAMiC,OACX,yBAAKW,UAAU,aACb,wBAAIA,UAAU,iBAAiBU,MAAO,CAAE8F,MAAO,YAA/C,uBAGA,uCACA,uBACExG,UAAU,8BACVyG,KAAI,URxEU,yCQwEV,sBRrEM,mCQqEN,yBRpES,kDQoET,kBAA6EjK,EAAOkK,KACtF,OADE,0CAIJ,4BAAQrB,KAAK,SAASrF,UAAU,wBAAhC,gBAIF,yBAAKA,UAAU,4BACb,wBAAIA,UAAU,eAAd,qEAIA,wBAAIA,UAAU,OAAOU,MAAO,CAAE8F,MAAO,YAArC,+IAKA,sWAQA,wBAAIxG,UAAU,OAAOU,MAAO,CAAE8F,MAAO,YAArC,iCAGA,wWAQA,oMAKA,qUAOA,wBAAIxG,UAAU,OAAOU,MAAO,CAAE8F,MAAO,YAArC,mCAGA,oJAIA,2BAAOhB,MAAM,kBACX,+BACE,4BACE,wBAAI/E,MAAM,OAAV,iBACA,wBAAIA,MAAM,OAAV,gBAGJ,+BACE,4BACE,wBAAIA,MAAM,OAAV,WACA,iFAEF,4BACE,wBAAIA,MAAM,OAAV,gBACA,iHAKF,4BACE,wBAAIA,MAAM,OAAV,UACA,qEAEF,4BACE,wBAAIA,MAAM,OAAV,oBACA,+EAEF,4BACE,wBAAIA,MAAM,OAAV,SACA,yEAEF,4BACE,wBAAIA,MAAM,OAAV,YACA,6EAEF,4BACE,wBAAIA,MAAM,OAAV,eACA,iFAEF,4BACE,wBAAIA,MAAM,OAAV,gBACA,yEAIN,+HAIA,wBAAIT,UAAU,OAAOU,MAAO,CAAE8F,MAAO,YAArC,iCAGA,iGAIA,wBAAIxG,UAAU,OAAOU,MAAO,CAAE8F,MAAO,YAArC,4EAIA,oZAUF,yBAAKxG,UAAU,QACb,uBAAGyG,KAAK,oDAAR,sBAGA,uBAAGzG,UAAU,UAAUyG,KAAK,uCAA5B,qBAMLhJ,KAAKL,MAAMiC,OAOV,kBAAC,EAAD,CAAQA,MAAO5B,KAAKL,MAAMiC,a,GA/MlBtB,cCIE4I,QACW,cAA7BjK,OAAOC,SAASiK,UAEe,UAA7BlK,OAAOC,SAASiK,UAEhBlK,OAAOC,SAASiK,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3D,MAAK,SAAA4D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhI,QAAQgI,MAAMA,EAAMC,c","file":"static/js/main.eecd6a33.chunk.js","sourcesContent":["export const authEndpoint = \"https://accounts.spotify.com/authorize\";\n\n// Replace with your app's client ID, redirect URI and desired scopes\nexport const clientId = \"29c9533a402248d8981f6885e388cf02\";\nexport const redirectUri = \"https://evakato14.github.io/music-accessibility\";\nexport const scopes = [\n  \"user-top-read\",\n  \"user-read-currently-playing\",\n  \"user-read-playback-state\",\n  \"user-modify-playback-state\"\n];\n","const hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\nwindow.location.hash = \"\";\n\nexport default hash;\n","import React, { Component } from \"react\";\nimport Ratings from \"react-ratings-declarative\";\n\nclass Rate extends Component {\n  constructor() {\n    super();\n    this.state = {\n      rating: 0\n    };\n    this.changeRating = this.changeRating.bind(this);\n  }\n\n  changeRating(newRating) {\n    this.setState({\n      rating: newRating\n    });\n  }\n\n  render() {\n    return (\n      <Ratings\n        rating={this.state.rating}\n        widgetRatedColors=\"#ffdd00\"\n        widgetHoverColors=\"#ffdd00\"\n        widgetDimensions=\"30px\"\n        changeRating={this.changeRating}\n      >\n        <Ratings.Widget />\n        <Ratings.Widget />\n        <Ratings.Widget />\n        <Ratings.Widget />\n        <Ratings.Widget />\n        <Ratings.Widget />\n        <Ratings.Widget />\n        <Ratings.Widget />\n        <Ratings.Widget />\n        <Ratings.Widget />\n      </Ratings>\n    );\n  }\n}\n\nexport default Rate;\n","export const customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\"\n  }\n};\n","import React, { Component } from \"react\";\nimport * as SpotifyWebApi from \"spotify-web-api-js\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faStar as farFaStar } from \"@fortawesome/free-regular-svg-icons\";\nimport Rate from \"./Rate\";\nimport ReactModal from \"react-modal\";\nimport { customStyles } from \"./modalStyles\";\n\nvar spotifyApi = new SpotifyWebApi();\nlibrary.add(farFaStar);\n\nclass PersonalTaste extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: false,\n      modalTrack: \"\"\n    };\n\n    this.handleOpenModal = this.handleOpenModal.bind(this);\n    this.handleCloseModal = this.handleCloseModal.bind(this);\n  }\n  componentDidMount() {\n    spotifyApi.setAccessToken(this.props.token);\n  }\n\n  play(albumUri, trackUri) {\n    console.log(albumUri, trackUri);\n    spotifyApi.play(\n      { context_uri: albumUri, offset: { uri: trackUri } },\n      function(err, data) {\n        console.log(data);\n      }\n    );\n  }\n\n  handleOpenModal = trackName => {\n    this.setState({ showModal: true, modalTrack: trackName });\n  };\n\n  handleCloseModal() {\n    this.setState({ showModal: false });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row mt-4\">\n          <h3 className=\"col-6 align-self-center\">\n            Here are the <span className=\"text-primary\">top 10 songs</span> we\n            recommend for you to get into {this.props.artist.name}\n            {this.props.artist.name.slice(-1).toLowerCase() == \"s\"\n              ? \"'\"\n              : \"'s\"}{\" \"}\n            music.\n          </h3>\n          <table className=\"table col-6\">\n            <tbody>\n              {this.props.recommendedTracks ? (\n                this.props.recommendedTracks.map((track, i) => (\n                  <tr>\n                    <th\n                      scope=\"row\"\n                      style={{ width: \"5%\" }}\n                      className=\"align-self-center\"\n                    >\n                      <h6 className=\"mt-2\">{i + 1}</h6>\n                    </th>\n                    <td style={{ width: \"10%\" }} className=\"align-self-center\">\n                      <img\n                        src={track.album_art}\n                        style={{ width: \"125%\" }}\n                      ></img>\n                    </td>\n                    <td style={{ width: \"75%\" }} className=\"text-left\">\n                      <h6 className=\"mt-2\">\n                        <strong>{track.title}</strong>\n                      </h6>\n                    </td>\n                    <td style={{ width: \"5%\" }} className=\"text-right\">\n                      <a\n                        className=\"btn btn-sm\"\n                        onClick={() =>\n                          this.play(\n                            \"spotify:album:\" + track.album_id,\n                            \"spotify:track:\" + track.track_id\n                          )\n                        }\n                      >\n                        <i className=\"fa fa-play-circle fa-2x\"></i>\n                      </a>\n                    </td>\n                    <td style={{ width: \"5%\" }} className=\"text-right\">\n                      <a\n                        className=\"btn btn-sm\"\n                        onClick={() => this.handleOpenModal(track.title)}\n                      >\n                        <FontAwesomeIcon\n                          icon={farFaStar}\n                          size=\"lg\"\n                          className=\"mt-1\"\n                        />\n                      </a>\n                    </td>\n                  </tr>\n                ))\n              ) : (\n                <div></div>\n              )}\n            </tbody>\n            <ReactModal isOpen={this.state.showModal} style={customStyles}>\n              <div className=\"text-center\">\n                <h3>\n                  Rate{\" \"}\n                  <span className=\"text-primary\">\n                    \"{this.state.modalTrack}\"\n                  </span>\n                </h3>\n                <h5>1 star (least enjoyment) to 10 stars (most enjoyment)</h5>\n                <p>\n                  Rating songs helps our recommendation algorithm become\n                  smarter.\n                </p>\n              </div>\n              <div className=\"row mt-4\">\n                <div className=\"col text-center\">\n                  <Rate></Rate>\n                </div>\n              </div>\n              <div className=\"row mt-4\">\n                <div className=\"col text-center\">\n                  <button\n                    className=\"btn btn-primary \"\n                    onClick={this.handleCloseModal}\n                  >\n                    Save\n                  </button>\n                </div>\n              </div>\n            </ReactModal>\n          </table>\n        </div>\n        <div className=\"row mt-3 mb-3 \">\n          <div className=\"col-1\"></div>\n          <h3 className=\"col-10\">\n            Here are the <span className=\"text-primary\">top album(s)</span> we\n            recommend for you to get into {this.props.artist.name}\n            {this.props.artist.name.slice(-1).toLowerCase() == \"s\"\n              ? \"'\"\n              : \"'s\"}{\" \"}\n            music.\n          </h3>\n        </div>\n        <div className=\"row justify-content-center\">\n          <h3 className=\"text-danger display-4\">Coming soon!</h3>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PersonalTaste;\n","import React, { useState } from \"react\";\nimport Recommended from \"./Recommended\";\nimport Popover from \"react-popover\";\nimport \"./Popover.css\";\n\nfunction PersonalTaste(props) {\n  let [albumPopoverOpen, toggleAlbumPopover] = useState(false);\n  let [singlePopoverOpen, toggleSinglePopover] = useState(false);\n\n  return (\n    <div className=\"container mb-5 mt-4\">\n      <div className=\"row\">\n        <h3 className=\"col-5 align-self-center pb-5\">\n          <div>\n            <img\n              src={props.artist.images[0].url}\n              className=\"img-responsive rounded-circle mb-3\"\n              style={{ width: \"31%\" }}\n            ></img>\n          </div>\n          {props.albumTypes.albums ? (\n            <div>\n              Using{\" \"}\n              <Popover\n                isOpen={albumPopoverOpen}\n                className=\"Popover-body Popover-tipShape\"\n                body={\n                  <div className=\"container\">\n                    {props.albumTypes.albums.length < 5 ? (\n                      props.albumTypes.albums.map(album => (\n                        <div className=\"mt-2 mb-2\">\n                          <img\n                            src={album.album_art}\n                            style={{ width: \"8%\" }}\n                          ></img>\n                          <span className=\"h5 ml-2\">{album.title}</span>\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"row\">\n                        {props.albumTypes.albums.map(album => (\n                          <div className=\"col-6 mt-1 mb-1\">\n                            <img\n                              src={album.album_art}\n                              style={{ width: \"10%\" }}\n                            ></img>\n                            <span className=\"h5 ml-2\">{album.title}</span>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                }\n                place=\"right\"\n                onOuterAction={toggleAlbumPopover}\n              >\n                <btn\n                  className=\"btn btn-light btn-lg\"\n                  onClick={() => toggleAlbumPopover(!albumPopoverOpen)}\n                >\n                  <span className=\"text-primary h5\">\n                    {props.albumTypes.albums.length}{\" \"}\n                    {props.albumTypes.albums.length == 1 ? \"album\" : \"albums\"}\n                  </span>\n                </btn>\n              </Popover>{\" \"}\n              and{\" \"}\n              <Popover\n                isOpen={singlePopoverOpen}\n                className=\"Popover-body Popover-tipShape\"\n                body={\n                  <div className=\"container\">\n                    {props.albumTypes.singles.length < 5 ? (\n                      props.albumTypes.singles.map(single => (\n                        <div className=\"mt-2 mb-2\">\n                          <img\n                            src={single.album_art}\n                            style={{ width: \"8%\" }}\n                          ></img>\n                          <span className=\"h5 ml-2\">{single.title}</span>\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"row \">\n                        {props.albumTypes.singles.map(single => (\n                          <div className=\"col-6 mt-1 mb-1\">\n                            <img\n                              src={single.album_art}\n                              style={{ width: \"10%\" }}\n                            ></img>\n                            <span className=\"h5 ml-2\">{single.title}</span>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                }\n                place=\"right\"\n                onOuterAction={toggleSinglePopover}\n              >\n                <btn\n                  className=\"btn btn-light btn-lg\"\n                  onClick={() => toggleSinglePopover(!singlePopoverOpen)}\n                >\n                  <span className=\"text-primary h5\">\n                    {props.albumTypes.singles.length}{\" \"}\n                    {props.albumTypes.singles.length == 1\n                      ? \"single\"\n                      : \"singles\"}\n                  </span>\n                </btn>\n              </Popover>{\" \"}\n              on Spotify, here are the audio features of {props.artist.name}\n              {props.artist.name.slice(-1).toLowerCase() == \"s\"\n                ? \"'\"\n                : \"'s\"}{\" \"}\n              overall sound.\n            </div>\n          ) : (\n            \"Loading...\"\n          )}\n        </h3>\n        <table className=\"table table-borderless col-7\">\n          <thead>\n            <tr>\n              <th scope=\"col\">Feature</th>\n              <th scope=\"col\">Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(props.artistOverallSound).map(audioFeature => (\n              <tr>\n                <td className=\"text-info\">{audioFeature}</td>\n                <td>\n                  {props.overallSound[audioFeature]\n                    ? props.artistOverallSound[audioFeature].toFixed(3)\n                    : \"Loading...\"}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      <div className=\"row\">\n        <table className=\"table table-borderless col-6\">\n          <thead>\n            <tr>\n              <th scope=\"col\">Feature</th>\n              <th scope=\"col\">Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(props.overallSound).map(audioFeature => (\n              <tr>\n                <td className=\"text-info\">{audioFeature}</td>\n                <td>\n                  {props.overallSound[audioFeature]\n                    ? props.overallSound[audioFeature].toFixed(3)\n                    : \"Loading...\"}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <h3 className=\"col-6 align-self-center\">\n          <div>\n            <img\n              src={props.user.images[0].url}\n              className=\"img-responsive rounded-circle mb-3 w-25\"\n            ></img>\n          </div>\n          We calculated the audio features of your overall music taste, based on\n          your favorite songs like{\" \"}\n          {props.twoTracks ? (\n            <div>\n              <span className=\"text-primary\">{props.twoTracks[0].name}</span> by{\" \"}\n              <span className=\"text-secondary\">\n                {props.twoTracks[0].artists[0].name}\n              </span>{\" \"}\n              and{\" \"}\n              <span className=\"text-primary\">{props.twoTracks[1].name}</span> by{\" \"}\n              <span className=\"text-secondary\">\n                {props.twoTracks[1].artists[0].name}\n              </span>\n              .\n            </div>\n          ) : (\n            <div></div>\n          )}\n        </h3>\n      </div>\n      <Recommended\n        artist={props.artist}\n        recommendedTracks={props.recommendedTracks}\n        token={props.token}\n        artistAlbums={props.artistAlbums}\n        noOfRecommendedAlbums={1}\n      ></Recommended>\n    </div>\n  );\n}\n\nexport default PersonalTaste;\n","import React from \"react\";\n\nexport function ClickedTitleText(props) {\n  return (\n    <h1 className=\"display-4\">\n      I want to get into{\" \"}\n      <span className=\"text-success\">\n        {props.artist.name}\n        {props.artist.name.slice(-1).toLowerCase() === \"s\" ? \"'\" : \"'s\"}\n      </span>{\" \"}\n      music...\n    </h1>\n  );\n}\n\nexport function SearchTitleText() {\n  return (\n    <h1 className=\"display-4\">\n      I want to get into{\" \"}\n      <span className=\"text-danger\">[insert artist here]'s</span> music...\n    </h1>\n  );\n}\n","import React, { Component } from \"react\";\nimport * as SpotifyWebApi from \"spotify-web-api-js\";\nimport PersonalTaste from \"./components/PersonalTaste\";\nimport { ClickedTitleText } from \"./components/TitleText\";\nimport { SearchTitleText } from \"./components/TitleText\";\nimport ReactModal from \"react-modal\";\nimport { customStyles } from \"./components/modalStyles\";\n\nvar spotifyApi = new SpotifyWebApi();\n\nclass Search extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: \"\",\n      showModal: false,\n      artists: \"\",\n      chosenArtist: \"\",\n      chosenArtistOverallSound: {\n        acousticness: 0,\n        danceability: 0,\n        energy: 0,\n        instrumentalness: 0,\n        loudness: 0,\n        speechiness: 0,\n        tempo: 0,\n        valence: 0\n      },\n      topTracks: [],\n      overallSound: {\n        valence: 0,\n        danceability: 0,\n        energy: 0,\n        instrumentalness: 0,\n        speechiness: 0,\n        acousticness: 0,\n        loudness: 0,\n        tempo: 0\n      },\n      artistAlbumTypes: {},\n      recommendedTracks: [],\n      range: \"medium_term\",\n      weight: 0.5\n    };\n    this.onSearchChange = this.onSearchChange.bind(this);\n    this.clickArtistProfile = this.clickArtistProfile.bind(this);\n    this.handleOpenModal = this.handleOpenModal.bind(this);\n    this.handleCloseModal = this.handleCloseModal.bind(this);\n    this.onRangeChange = this.onRangeChange.bind(this);\n    this.onWeightChange = this.onWeightChange.bind(this);\n  }\n\n  componentDidMount() {\n    spotifyApi.setAccessToken(this.props.token);\n    spotifyApi.getMe(\n      function(err, data) {\n        this.setState({\n          user: data\n        });\n      }.bind(this)\n    );\n  }\n\n  onRangeChange(e) {\n    this.setState({\n      range: e.target.value\n    });\n  }\n\n  onWeightChange(e) {\n    this.setState({\n      weight: e.target.value\n    });\n  }\n\n  handleOpenModal() {\n    this.setState({ showModal: true });\n  }\n\n  handleCloseModal() {\n    this.setState({ showModal: false });\n  }\n\n  reset() {\n    this.setState({\n      artists: \"\",\n      chosenArtist: \"\",\n      chosenArtistOverallSound: {\n        acousticness: 0,\n        danceability: 0,\n        energy: 0,\n        instrumentalness: 0,\n        loudness: 0,\n        speechiness: 0,\n        tempo: 0,\n        valence: 0\n      },\n      topTracks: [],\n      overallSound: {\n        valence: 0,\n        danceability: 0,\n        energy: 0,\n        instrumentalness: 0,\n        speechiness: 0,\n        acousticness: 0,\n        loudness: 0,\n        tempo: 0\n      },\n      artistAlbumTypes: {},\n      recommendedTracks: []\n    });\n  }\n\n  onSearchChange(e) {\n    if (e.target.value) {\n      spotifyApi.searchArtists(\n        e.target.value,\n        function(err, data) {\n          let max = 20;\n          if (data.artists) {\n            max = data.artists.items.length;\n          }\n          for (var i = 0; i < data.artists.items.length; i++) {\n            if (data.artists.items[i].followers.total < 1000) {\n              max = i;\n              break;\n            }\n          }\n          this.setState({\n            artists: data.artists.items.slice(0, max)\n          });\n        }.bind(this)\n      );\n    } else {\n      this.setState({\n        artists: \"\"\n      });\n    }\n  }\n\n  clickArtistProfile = artist => {\n    this.setState({\n      chosenArtist: artist\n    });\n    fetch(\n      \"http://evakato14.pythonanywhere.com/audio_features?artist=\" +\n        artist.uri +\n        \"&token=\" +\n        this.props.token +\n        \"&range=\" +\n        this.state.range +\n        \"&weight=\" +\n        this.state.weight\n    ).then(response =>\n      response.json().then(data => {\n        console.log(data);\n        this.setState({\n          chosenArtistOverallSound: data[\"artist_audio_features\"],\n          overallSound: data[\"user_audio_features\"],\n          randomUserTracks: data[\"user_two_songs\"],\n          artistAlbumTypes: data[\"artist_album_types\"],\n          recommendedTracks: data[\"recommended_tracks\"]\n        });\n      })\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"container mt-4 mb-4\">\n        {this.state.chosenArtist.name ? (\n          <div>\n            <ClickedTitleText\n              artist={this.state.chosenArtist}\n            ></ClickedTitleText>\n            <PersonalTaste\n              user={this.state.user}\n              overallSound={this.state.overallSound}\n              artist={this.state.chosenArtist}\n              artistOverallSound={this.state.chosenArtistOverallSound}\n              twoTracks={this.state.randomUserTracks}\n              albumTypes={this.state.artistAlbumTypes}\n              token={this.props.token}\n              recommendedTracks={this.state.recommendedTracks}\n            ></PersonalTaste>\n            <button className=\"btn btn-warning\" onClick={() => this.reset()}>\n              Search another artist!\n            </button>\n          </div>\n        ) : (\n          <div>\n            <SearchTitleText></SearchTitleText>\n            <div className=\"row mt-4 mb-4\">\n              <div className=\"col-sm-3\"></div>\n              <div className=\"col-sm-6\">\n                <input\n                  type=\"text\"\n                  className=\"form-control form-control-lg\"\n                  placeholder=\"Search Artist\"\n                  onChange={this.onSearchChange}\n                ></input>\n              </div>\n              <div className=\"col-sm-3 text-left\">\n                <button\n                  className=\"btn btn-light\"\n                  onClick={() => this.handleOpenModal()}\n                >\n                  <i class=\"fa fa-cog fa-2x\"></i>\n                </button>\n                <ReactModal isOpen={this.state.showModal} style={customStyles}>\n                  <h6 className=\"text-center\">\n                    We use your listening history to calculate your preferred\n                    sound.\n                  </h6>\n                  <h6 className=\"text-center\">\n                    Feel free to change the time period from which we collect\n                    your listening habits:\n                  </h6>\n                  <div\n                    className=\"btn-group d-block text-center mb-4\"\n                    role=\"group\"\n                  >\n                    <button\n                      type=\"button\"\n                      value=\"short_term\"\n                      className={\n                        \"btn \" +\n                        (this.state.range == \"short_term\"\n                          ? \"btn-dark\"\n                          : \"btn-outline-dark\")\n                      }\n                      onClick={this.onRangeChange}\n                    >\n                      Past 30 Days\n                    </button>\n                    <button\n                      type=\"button\"\n                      value=\"medium_term\"\n                      className={\n                        \"btn \" +\n                        (this.state.range == \"medium_term\"\n                          ? \"btn-dark\"\n                          : \"btn-outline-dark\")\n                      }\n                      onClick={this.onRangeChange}\n                    >\n                      Past 6 Months\n                    </button>\n                    <button\n                      type=\"button\"\n                      value=\"long_term\"\n                      className={\n                        \"btn \" +\n                        (this.state.range == \"long_term\"\n                          ? \"btn-dark\"\n                          : \"btn-outline-dark\")\n                      }\n                      onClick={this.onRangeChange}\n                    >\n                      Past Year\n                    </button>\n                  </div>\n                  <h6 className=\"text-center\">\n                    We think it's important to factor how representative of the\n                    artist's sound is in our recommendation algorithm.\n                  </h6>\n                  <h6 className=\"text-center\">\n                    Feel free to change the weighting of this representativeness\n                    factor.\n                  </h6>\n                  <div className=\"d-block text-center\">\n                    <span className=\"mr-4 small\">Not very representative</span>\n                    <div className=\"btn-group\" role=\"group\">\n                      <button\n                        type=\"button\"\n                        value={0.1}\n                        className={\n                          \"btn \" +\n                          (this.state.weight == 0.1\n                            ? \"btn-dark\"\n                            : \"btn-outline-dark\")\n                        }\n                        onClick={this.onWeightChange}\n                      >\n                        10%\n                      </button>\n                      <button\n                        type=\"button\"\n                        value={0.3}\n                        className={\n                          \"btn \" +\n                          (this.state.weight == 0.3\n                            ? \"btn-dark\"\n                            : \"btn-outline-dark\")\n                        }\n                        onClick={this.onWeightChange}\n                      >\n                        30%\n                      </button>\n                      <button\n                        type=\"button\"\n                        value={0.5}\n                        className={\n                          \"btn \" +\n                          (this.state.weight == 0.5\n                            ? \"btn-dark\"\n                            : \"btn-outline-dark\")\n                        }\n                        onClick={this.onWeightChange}\n                      >\n                        50%\n                      </button>\n                      <button\n                        type=\"button\"\n                        value={0.7}\n                        className={\n                          \"btn \" +\n                          (this.state.weight == 0.7\n                            ? \"btn-dark\"\n                            : \"btn-outline-dark\")\n                        }\n                        onClick={this.onWeightChange}\n                      >\n                        70%\n                      </button>\n                      <button\n                        type=\"button\"\n                        value={0.9}\n                        className={\n                          \"btn \" +\n                          (this.state.weight == 0.9\n                            ? \"btn-dark\"\n                            : \"btn-outline-dark\")\n                        }\n                        onClick={this.onWeightChange}\n                      >\n                        90%\n                      </button>\n                    </div>\n                    <span className=\"ml-4 small\">Very representative</span>\n                  </div>\n                  <div className=\"text-center mt-4\">\n                    <button\n                      className=\"btn btn-primary \"\n                      onClick={this.handleCloseModal}\n                    >\n                      Close\n                    </button>\n                  </div>\n                </ReactModal>\n              </div>\n            </div>\n            {this.state.artists ? (\n              this.state.artists.map(artist => (\n                <button\n                  type=\"button\"\n                  className=\"btn btn-lg btn-light mr-2 mt-2\"\n                  key={artist.id}\n                  onClick={() => this.clickArtistProfile(artist)}\n                >\n                  {artist.name}\n                </button>\n              ))\n            ) : (\n              <div></div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React, { Component } from \"react\";\nimport * as $ from \"jquery\";\nimport { authEndpoint, clientId, redirectUri, scopes } from \"./config\";\nimport hash from \"./hash\";\nimport Player from \"./Player\";\nimport Search from \"./Search\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      token: null,\n      item: {\n        album: {\n          images: [{ url: \"\" }]\n        },\n        name: \"\",\n        artists: [{ name: \"\" }],\n        duration_ms: 0\n      },\n      is_playing: \"Paused\",\n      progress_ms: 0\n    };\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n  }\n  componentDidMount() {\n    // Set token\n    let _token = hash.access_token;\n\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token\n      });\n      //this.getCurrentlyPlaying(_token);\n    }\n  }\n\n  componentDidUpdate() {\n    //this.getCurrentlyPlaying(this.state.token);\n  }\n\n  getCurrentlyPlaying(token) {\n    // Make a call using the token\n    $.ajax({\n      url: \"https://api.spotify.com/v1/me/player\",\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        this.setState({\n          item: data.item,\n          is_playing: data.is_playing,\n          progress_ms: data.progress_ms\n        });\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.token && (\n          <div className=\"container\">\n            <h1 className=\"display-4 mt-3\" style={{ color: \"#2FB8C3\" }}>\n              Music Accessibility\n            </h1>\n            <p>Eva Kato</p>\n            <a\n              className=\"btn btn--loginApp-link mt-1\"\n              href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n                \"%20\"\n              )}&response_type=token&show_dialog=true`}\n            >\n              <button type=\"button\" className=\"btn btn-outline-dark\">\n                Try it out!\n              </button>\n            </a>\n            <div className=\"container w-75 mt-3 mb-5\">\n              <h4 className=\"text-danger\">\n                To-Do: Rating system with machine learning, album\n                recommendations\n              </h4>\n              <h5 className=\"mt-4\" style={{ color: \"#2F6EC3\" }}>\n                Have you ever gotten an artist recommendation from a friend?\n                Ever wondered where to start when exploring an artist's\n                extensive discography?\n              </h5>\n              <h6>\n                The goal of my recommendation algorithm is to create a more\n                targeted approach to enjoying a new artist. Instead of being\n                introduced to an artist with random or popular songs, listeners\n                will have the greatest chance of enjoying an artist with a\n                data-driven recommendation algorithm to find the most accessible\n                songs and albums.\n              </h6>\n              <h5 className=\"mt-4\" style={{ color: \"#2F6EC3\" }}>\n                What makes a song accessible?\n              </h5>\n              <h6>\n                Listeners who are unfamiliar with a song should enjoy it within\n                their first few attempts. Accessible songs have sounds that are\n                somewhat similar to the music a listener already enjoys. For\n                example, if a person typically listens to mainstream pop, an\n                accessible song for that person will sound somewhat similar to\n                mainstream pop.\n              </h6>\n              <h6>\n                However, if someone wants to become familiar with an artist’s\n                music, it is also important that the recommended songs represent\n                the overall sound of the artist.\n              </h6>\n              <h6>\n                Therefore, accessible songs have a good combination of both\n                similarity to listener's taste and representativeness of given\n                artist. Still, the weight of representativeness can be changed\n                to the user's preferences (there is a feature in settings),\n                depending on how important that is to the user.\n              </h6>\n              <h5 className=\"mt-4\" style={{ color: \"#2F6EC3\" }}>\n                How is \"similarity\" calculated?\n              </h5>\n              <h6>\n                Spotify audio data contains variables to describe a song’s\n                sound. The variables used for this analysis include:\n              </h6>\n              <table class=\"table table-sm\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">Audio Feature</th>\n                    <th scope=\"col\">Definition</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <th scope=\"row\">Valence</th>\n                    <td>the positivity/negativity of a song’s sound</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">Danceability</th>\n                    <td>\n                      the extent to which a song is suitable for dancing based\n                      on its rhythm and tempo\n                    </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">Energy</th>\n                    <td>the intensity of a song’s sound</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">Instrumentalness</th>\n                    <td>the likelihood that a track contains no vocals</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">Tempo</th>\n                    <td>the estimated beats per minute of a song</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">Loudness</th>\n                    <td>the loudness of a song, measured in decibels</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">Speechiness</th>\n                    <td>the extent to which a song contains spoken words</td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">Acousticness</th>\n                    <td>the likelihood that a song is acoustic</td>\n                  </tr>\n                </tbody>\n              </table>\n              <h6>\n                The most similar songs will have the smallest distance between\n                their respective audio features.\n              </h6>\n              <h5 className=\"mt-4\" style={{ color: \"#2F6EC3\" }}>\n                What artists can be searched?\n              </h5>\n              <h6>\n                Any artists on Spotify with at least 1000 followers are\n                included.\n              </h6>\n              <h5 className=\"mt-4\" style={{ color: \"#2F6EC3\" }}>\n                What albums and songs are accounted for in the recommendation\n                algorithm?\n              </h5>\n              <h6>\n                The albums and songs that are included must be a certain\n                popularity compared its own artist. This rules out extra\n                material that doesn't make sense for a new listener to start\n                with, such as live albums, demos, compilations, commentary, etc.\n                as well as less important and \"nonessential\" albums to an\n                artist. (Bjork stans - No, Vulnicura isn't included. Don't come\n                at me.)\n              </h6>\n            </div>\n            <div className=\"mb-5\">\n              <a href=\"https://github.com/evakato14/music-accessibility\">\n                Web Interface Code\n              </a>\n              <a className=\"d-block\" href=\"https://github.com/evakato14/ma-api\">\n                Python API Code\n              </a>\n            </div>\n          </div>\n        )}\n        {this.state.token && (\n          //<Player\n          //item={this.state.item}\n          //is_playing={this.state.is_playing}\n          //progress_ms={this.progress_ms}\n          //token={this.state.token}\n          ///>\n          <Search token={this.state.token}></Search>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}